from numpy import array, random
from scipy.special import softmax

# encoder representations of four different words. In a real scenario, these
# vectors would have been generated by an encoder. We are going to compute
# the attention for each word in this sequence of four words.
word_1 = array([1, 0, 0])
word_2 = array([0, 1, 0])
word_3 = array([1, 1, 0])
word_4 = array([0, 0, 1])

words = array([word_1, word_2, word_3, word_4])
print("Words:{}".format(words))

# Next, we generates the weight matrices that we will eventually multiply
# to the word representations to generate the queries, keys and values.
# Here for practical purpose we generate these weight matrices randomly, but
# in a real scenario these would have been learned during training.
random.seed(42)  # to allow us to reproduce the same attention values
W_Q = random.randint(3, size=(3,3))
print("W_Q:{}".format(W_Q))
W_K = random.randint(3, size=(3,3))
print("W_K:{}".format(W_K))
W_V = random.randint(3, size=(3,3))
print("W_V:{}".format(W_V))

# Next, we generate the query, key, value vectors for each word, by
# multiplying each word representation by each of the weight matrices.
Q = words @ W_Q
print("Q:{}".format(Q))
K = words @ W_K
print("K:{}".format(K))
V = words @ W_V
print("V:{}".format(V))

# We now score the query vectors against all the key
# vectors using a dot product operation.
scores = Q @ K.transpose()
print("scores:{}".format(scores))
# The score values are then passed through a softmax operation to generate
# the weights. Before doing so, it is common pracice to divide the score
# values by the square root of the dimensionality of the key vecors (three,
# in this case) to keep the gradients stable.
weights = softmax(scores / K.shape[1] ** 0.5, axis=1)
print("weights:{}".format(weights))

# We finally compute the attention output as a weighted sum of all four
# value vectors.
attention = weights @ V
print("attention:{}".format(attention))

# In this tutorial, we discovered the attention mechanism and its
# implementation. Specifically we learned:
# - How the attention mechanism uses a weighted sum of all the encoder
#   Hidden states to fexibly focus the attention fo the decoder to the
#   most relevant parts of the input sequence
# - How the attention mechanism can be generalized for tasks where the
#   information may not necessarily be related in a sequential fashion.
# - How to implement the general attention mechanism with NumPy and SciPy.
